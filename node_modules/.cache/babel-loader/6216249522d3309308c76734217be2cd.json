{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-console */\nimport { SDK_VERSION } from '../core/version';\nimport { PlatformSupport } from '../platform/platform';\nexport var LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogLevel[LogLevel[\"ERROR\"] = 1] = \"ERROR\";\n  LogLevel[LogLevel[\"SILENT\"] = 2] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\n\nvar logLevel = LogLevel.ERROR; // Helper methods are needed because variables can't be exported as read/write\n\nexport function getLogLevel() {\n  return logLevel;\n}\nexport function setLogLevel(newLevel) {\n  logLevel = newLevel;\n}\nexport function debug(tag, msg) {\n  var obj = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    obj[_i - 2] = arguments[_i];\n  }\n\n  if (logLevel <= LogLevel.DEBUG) {\n    var time = new Date().toISOString();\n    var args = obj.map(argToString);\n    console.log.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \" [\" + tag + \"]: \" + msg].concat(args));\n  }\n}\nexport function error(msg) {\n  var obj = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    obj[_i - 1] = arguments[_i];\n  }\n\n  if (logLevel <= LogLevel.ERROR) {\n    var time = new Date().toISOString();\n    var args = obj.map(argToString);\n    console.error.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \": \" + msg].concat(args));\n  }\n}\n/**\n * Converts an additional log parameter to a string representation.\n */\n\nfunction argToString(obj) {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    var platform = PlatformSupport.getPlatform();\n\n    try {\n      return platform.formatJSON(obj);\n    } catch (e) {\n      // Converting to JSON failed, just log the object directly\n      return obj;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}