{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from './assert';\nexport function contains(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\nexport function get(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key) ? obj[key] : null;\n}\nexport function size(obj) {\n  var count = 0;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      count++;\n    }\n  }\n\n  return count;\n}\n/** Returns the given value if it's defined or the defaultValue otherwise. */\n\nexport function defaulted(value, defaultValue) {\n  return value !== undefined ? value : defaultValue;\n}\nexport function forEachNumber(obj, fn) {\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var num = parseInt(key, 10);\n\n      if (!isNaN(num)) {\n        fn(num, obj[key]);\n      }\n    }\n  }\n}\nexport function forEach(obj, fn) {\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\nexport function lookupOrInsert(obj, key, valFn) {\n  if (!contains(obj, key)) {\n    obj[key] = valFn();\n  }\n\n  return obj[key];\n}\nexport function isEmpty(obj) {\n  assert(obj != null && typeof obj === 'object', 'isEmpty() expects object parameter.');\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function shallowCopy(obj) {\n  assert(obj && typeof obj === 'object', 'shallowCopy() expects object parameter.');\n  var result = {};\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      result[key] = obj[key];\n    }\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}